'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PubgApi = require('../api/PubgApi');

var _PubgApi2 = _interopRequireDefault(_PubgApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApiModel = function () {
    function ApiModel(id) {
        var autoload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _classCallCheck(this, ApiModel);

        this.api = _PubgApi2.default;
        this.isRecord = false;

        if (typeof this.get === 'function' && id && autoload) {
            return this.get(id);
        } else if (id) {
            this.id = id;
        }
    }

    /**
     * Set the local primary key
     * @private
     *
     * @param {*} val
     */


    _createClass(ApiModel, [{
        key: 'clean',
        value: function clean() {
            if (this.isRecord === false) {
                return false;
            }

            var cleanObject = {};

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._metaData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    cleanObject[key] = this[key];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return cleanObject;
        }
    }, {
        key: 'load',
        value: function load() {
            if (this.isRecord === false) {
                return this.get(this.id);
            }
        }
    }, {
        key: 'processId',
        value: function processId(id) {
            if (!id && this.isRecord === true && this.primaryKey !== false) {
                return this.id;
            } else if (this.primaryKey === false && !id && this.record === true) {
                throw Error("Please specify a primary key on a custom api model if it is to act as a proxy.");
            }

            return id;
        }
    }, {
        key: 'recordCall',
        value: function recordCall(route, key, id) {
            var _this = this;

            var sub = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var callId = this.processId(id);

            return this.api.get(route.replace("{id}", callId)).then(function (results) {
                if (_this.isRecord === true) {
                    if (sub !== false) {
                        results = results[sub];
                    }

                    _this[key] = results;

                    return _this;
                }

                return results;
            });
        }
    }, {
        key: 'wrapResponse',
        value: function wrapResponse(obj) {
            obj._metaData = Object.keys(obj);
            obj.isRecord = true;
            return Object.assign(Object.create(Object.getPrototypeOf(this)), this, obj);
        }
    }, {
        key: 'id',
        set: function set(val) {
            if (this.primaryKey == 'id') {
                return this._id = val;
            }
            return this[this.primaryKey] = val;
        }

        /**
         * @type {string}
         */
        ,
        get: function get() {
            if (this.primaryKey == 'id') {
                return this._id;
            }

            return this[this.primaryKey];
        }
    }], [{
        key: 'callAPI',
        value: function callAPI(route) {
            return _PubgApi2.default.get(route);
        }
    }]);

    return ApiModel;
}();

exports.default = ApiModel;
;