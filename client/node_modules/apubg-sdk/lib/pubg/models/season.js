'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PubgApi = require('../../api/PubgApi');

var _PubgApi2 = _interopRequireDefault(_PubgApi);

var _apiModel = require('../apiModel');

var _apiModel2 = _interopRequireDefault(_apiModel);

var _module = require('module');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class Season
 * @extends ApiModel
 */
var Season = function (_ApiModel) {
    _inherits(Season, _ApiModel);

    function Season() {
        var _ret;

        _classCallCheck(this, Season);

        var _this = _possibleConstructorReturn(this, (Season.__proto__ || Object.getPrototypeOf(Season)).call(this, false, false));

        return _ret = Season.get(), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Season, null, [{
        key: 'get',


        /**
         * Get all Seasons
         * @returns {Promise}
         * @fulfil {Season[]}
         */
        value: async function get() {
            var _ref = await this.callAPI('seasons'),
                data = _ref.data;

            return data;
        }

        /**
         * Get Current Season
         *
         * @returns {Promise}
         * @fulfill {Season}
         */

    }, {
        key: 'getCurrent',
        value: async function getCurrent() {
            var data = await Season.get();

            return data.filter(function (d) {
                return d.attributes.isCurrentSeason === true;
            }).shift();
        }
    }, {
        key: 'primaryKey',
        get: function get() {
            return "id";
        }
    }]);

    return Season;
}(_apiModel2.default);

exports.default = Season;