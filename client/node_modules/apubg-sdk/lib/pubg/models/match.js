'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _apiModel = require('../apiModel');

var _apiModel2 = _interopRequireDefault(_apiModel);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class Match
 * @extends ApiModel
 */
var Match = function (_ApiModel) {
    _inherits(Match, _ApiModel);

    /**
     * A new match can be called by newing up with an ID or calling a static Match.get(id)
     * @constructs
     * @param {string} id id to search for
     * @param {bool} autoload if searching for an id, set this to false to not immediately make an api call to popualte the match data
     */
    function Match(id) {
        var autoload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _classCallCheck(this, Match);

        var _this = _possibleConstructorReturn(this, (Match.__proto__ || Object.getPrototypeOf(Match)).call(this, id, autoload));

        if (!_this.isRecord) {
            _this.included = [{
                attributes: {}
            }];
        }
        return _this;
    }

    /**
     * @type object
     */


    _createClass(Match, [{
        key: 'get',


        /**
         * Fetch for a specific match
         * WARNING: This will overwrite this object's internal data
         * @param {string} id
         * @return {Match} 
         */
        value: function get(id) {
            var _this2 = this;

            return this.api.get(this.route + '/' + id + '/').then(function (match) {
                if (match) {
                    match.id = id;
                }

                return _this2.wrapResponse(match);
            });
        }

        /**
         * Fetch for a specific player's data from within a match record
         *
         * @param {string} name
         * @return {object}
         */

    }, {
        key: 'getPlayerByName',
        value: function getPlayerByName(name) {
            if (this.isRecord === false) {
                return {};
            }

            return this.included.find(function (i) {
                return i.attributes.name === name;
            });
        }

        /**
         * Return a match's telemetry data
         *
         * @param {bool} full set to true to make the call, otherwise return the URL
         * @fulfil {URL}
         * @returns promise
         */

    }, {
        key: 'getTelemetry',
        value: async function getTelemetry() {
            var full = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            try {
                var id = this.data.relationships.assets.data.id;
                var asset = this.included.find(function (i) {
                    return i.id === id;
                });

                if (full) {
                    var _axios$get = _axios2.default.get(asset.attributes.URL),
                        data = _axios$get.data;

                    return data;
                }

                return asset.attributes.URL;
            } catch (e) {
                return full ? {} : '';
            }
        }
    }, {
        key: 'relationships',
        get: function get() {
            return this.data.relationshps;
        }

        /**
         * @type {string}
         */

    }, {
        key: 'type',
        get: function get() {
            try {
                return this.data.attributes.gameMode;
            } catch (e) {
                return null;
            }
        }

        /**
         * @type {string}
         */

    }, {
        key: 'map',
        get: function get() {
            try {
                return this.data.attributes.mapname;
            } catch (e) {
                return null;
            }
        }

        /**
         * Fetch a match by id
         *
         * @memberOf {Match}
         * @param {*} id 
         * @return {Promise}
         * @fulfill {Match}
         */

    }], [{
        key: 'get',
        value: function get(id) {
            return new Match(id);
        }
    }]);

    return Match;
}(_apiModel2.default);

exports.default = Match;