'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _env = require('../env/env');

var _env2 = _interopRequireDefault(_env);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var API_ROOT = 'https://api.playbattlegrounds.com/shards/' + _env2.default.region;
var HEADER = {
    'Authorization': 'Bearer ' + _env2.default.apiKey,
    'Content-Type': 'application/json',
    'Accept': 'application/vnd.api+json'

    /**
     * Simple api connector that wraps around the basic axios object
     * @class PubgApi
     */
};
var PubgApi = function () {
    function PubgApi() {
        _classCallCheck(this, PubgApi);
    }

    _createClass(PubgApi, null, [{
        key: 'get',

        /**
         * Makes a GET request to the requested route
         * @param {string} route
         * @fulfil {object} PUBG Api Data
         * @error {object} Axios error object
         * @return {Promise}
         */
        value: function get(route) {
            return new Promise(function (resolve, reject) {
                (0, _axios2.default)({
                    baseURL: API_ROOT,
                    headers: HEADER,
                    url: route
                }).then(function (_ref) {
                    var data = _ref.data;
                    return resolve(data);
                }).catch(function (e) {
                    console.log(e);
                    reject(e.errors);
                });
            });
        }
    }]);

    return PubgApi;
}();

exports.default = PubgApi;